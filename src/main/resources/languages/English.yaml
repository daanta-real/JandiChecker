# Common
appName: "JandiChecker"
commandExecutionKeyword: "heyjandi"
icon: "icon"
font: "font"

instance: "instance"
window: "window"
tray: "tray"

today: "today"
yesterday: "yesterday"
date: "date"
period: "period"

request: "request"
start: "start"
initialization: "initialization"
creation: "creation"
activation: "activation"
fin: "complete"
exit: "exit"

button: "button"
slash: "slash"
command: "command"

me: "me"
info: "info"
about: "about"
close: "close"

err_incorrectInput: "Please enter correctly."
err_dateStr: "The entered a date string does not match the format."
err_dateValue: "Wrong date value."
err_gitHubIDNotExists: "GitHub ID does not exist."
err_noCommitMapInGitHubProfile: "Failed to get info because there is no commit info on your profile page."
err_failedToGetInfo: "Failed to get info."
err_occurred: "An error occurred."
pressTheEnterKey: "Hit the enter key."
tip_howToGetLongAnswer: "Asking a question like \"heyjandi bla bla...\" and you can get a longer answer."

appInfo1: |
  _**I will find people who succeed committing every night.**_
  
  # What is Jandi and JandiChecker?
  'Jandi' is a term used to refer to the act of committing to GitHub. When you commit on GitHub, the green color on the GitHub commit map looks like planting grass ('jandi' in Korean), so it's a term that Korean developers have come to use a lot. JandiChecker is the utility bot to check the commit periodically to make you and your group's daily commit habit more healthier.

  # How to use JandiChecker
  The JandiChecker command can be called in three ways.
  1. Enter '/' (slash) in the chat window and the available commands are displayed as a slash menu. After selecting/typing the one you want, and enter the option if additional options are required.
  2. Type 'HeyJandi' in the chat window and the available commands are displayed as a button menu. After pressing the menu button one you want, and enter the option if additional options are required.
  3. Just type 'HeyJandi [question content]', you can ask the AI directly without calling the menu.

  # Detailed introduction to each command 
    /me: Shows my commit info. You need to registered as a group member to run the command.
    /heyjandi: Ask the ChatGPT AI to answer common questions and get answers. You can enter your questions in Korean.
    /info [name]: Displays the general grass information of a specific group member. You can enter both your first and last name, or just your first name.
    /id [ID]: Outputs the general grass information of a specific Github ID.
    /yesterday: Prints a list of group members who succeeded in planting grass yesterday.
    /yesterdayfail: Prints a list of people who passed yesterday's grass planting.
    /today: Prints a list of people who passed planting today. If today's commit information is not public, you may not be able to view it.
    /date [yyyyMMdd]: Print a list of people who planted grass on a specific date. You can search for dates before the current date.
    /about: Introducing this bot.

appInfo2: |
  # tips
  When asking AI questions, be as specific and detailed as possible.
  The more precisely you define your question, the more precise your answer will be.

  # App information
  [JandiChecker] (%s Build %s)
  * Stacks used: Java 17, Gradle, IntelliJ, JDA, Quartz, ChatGPT API, Google Cloud API (for translation), Swing, JUnit5, Logback
  * Have taking an effort to comply with TDD.
  
  # Developer's information
  * Developed by 단타(박준성) / Daanta(Junsung Park)
  * GitHub: http://github.com/daanta-real
  * Blog  : http://blog.naver.com/daanta
  * e-mail: daanta@naver.com

main_description: "Github commit checker"

# ChatService and Chat
chat_query: "Original question received: <<<{}>>> (length {})"
chat_response: "Answer received: <<<{}>>>"
chat_theQueryByName: "Member {}'s question: {}"
chat_questionByName: "%s's question"
chat_theAnswer: "Answer: {}"
chat_GPTSays: "ChatGPT AI says..."

# CmdService
cmd_needMemberName: "Please enter the name of the group member you are looking for."

# Checker
checker_getNotCommittedYesterday_result: "%s people who passed committing yesterday"
checker_getDidCommitYesterday_result: "%s people who successfully committed yesterday...!"
checker_getDidCommittedToday_result_success: "%s people succeeded in committing today...!"
checker_getDidCommittedToday_result_fail_description: "If today's commit has not yet been made public to non-member users, today's commit may not be viewed."
checker_getDidCommittedSomeday: "On %s, %s people are succeed to commit."

# Crawler
crawler_trimResultOne: "Trim result: total {} ({} ~ {})"
crawler_trimResultAll: "All trim results: {}"

# GitHubMap
gitHubMap_firstSunday: "The date of Sunday: {} days before"
gitHubMap_mapInfo: "Map info"
gitHubMap_sirStr: ""
gitHubMap_mapOf: "'s recent commit info"
gitHubMap_CommittedInLast30: "commitment in recent 30 days"
gitHubMap_count: "days (daily commit attending"
gitHubMap_CommitMapOfRecent1Year: "commitment in recent 1 year"

# Translation
transl_inputByName: "%s's input"
transl_textByGoogle: "Google God has translated"

# Menu name
cmdName_yesterday_fail: "yesterdayfail"
cmdName_MainToEN: ""
cmdName_ENToMain: ""
menu_me: "My commits"
menu_heyJandi: "Q. to ChatGPT"
menu_listYesterdaySucceed: "Yesterday's succeed list"
menu_listTodaySucceed: "Today's succeed list"
menu_mapByName: "Commit info by name"
menu_mapByID: "Commit info by ID"
menu_listYesterdayFail: "Yesterday's fail list"
menu_listByDate: "Specific day's succeed list"
menu_jandiHereHowCanIHelpYou: "Jandi here. What can I help you?"

# Menu description
menu_desc_me: "Search my commit information."
menu_desc_heyJandi: "Ask a question to ChatGPT AI, a friend of Jandi."
menu_desc_listYesterdaySucceed: "Check the list of group members who succeeded in committing yesterday."
menu_desc_listTodaySucceed: "Check out the list of group members who were successful in committing today."
menu_desc_mapByName: "Enter the name of a group member to search the commit info of a group member."
menu_desc_mapByID: "Search commit info of a specific ID. It's also okay for people who are not members of the group."
menu_desc_listYesterdayFail: "Check the list of group members who forgot to commit yesterday."
menu_desc_listByDate: "View a list of group members who succeeded in committing on a specific day."
menu_desc_about: "Prints an introduction and help for this bot."
menu_desc_ENToMain: ""
menu_desc_MainToEN: ""
menu_pleaseInput_question: "Please enter your question."
menu_pleaseInput_name: "Please enter the name of the group member."
menu_pleaseInput_GitHubID: "Enter the ID of the person you want to search."
menu_pleaseInput_date: "Please enter a date. The day must be entered in the format yyyyMMdd and only be in recent 1 year."
menu_pleaseInput_EngLang: ""
menu_pleaseInput_MainLang: ""

# Modal
modal_inputMemberName: "Group member's name"
modal_inputMemberName_description: "Enter the group member's name"
modal_inputGitHubID: "Enter your GitHub ID"
modal_maxLen10: "Up to 10 characters"
modal_maxLen20: "Up to 20 characters"
modal_inputTheQuestion: "Enter your question"
modal_inputTheQuestion_description: "Question you want to ask"
modal_inputTheQuestion_placeholder: "Up to 300 characters. If you want to limit the number of characters, please type \"HeyJandi [question content]\" directly into the chat instead of going through this button menu."
modal_inputTheDate: "Enter the date"
modal_inputTheDate_description: "Date to look up"
modal_inputTheDate_placeholder: "yyyyMMdd format"
modal_inputTheMainLang_description: ""
modal_inputTheEnglish_description: ""
modal_inputTheEnglish: ""
modal_inputTheMainLang: ""
modal_maybeLongerBeOk: "Maybe it's okay if it's a little longer..?"
