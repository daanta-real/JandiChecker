
plugins {
//    id 'java-library'
//    id 'maven-publish'
    id 'java'
//    id 'org.kordamp.gradle.jdeps' version '0.19.0'
}

group = 'Group'
version = '0.0.1-SNAPSHOT'
description = 'Discord_bot_JandiChecker'
// sourceCompatibility = '17' > not used

repositories {
    mavenLocal()
    mavenCentral()
    gradlePluginPortal()
    maven { url 'https://repo.maven.apache.org/maven2/' }
    // 아래는 온갖 미러사이트들. 필요 시 주석 해제
    maven { url 'https://maven.aliyun.com/repository/google/' }
    maven { url 'https://maven.aliyun.com/repository/public/' }
    maven { url 'https://maven.aliyun.com/repository/spring/' }
    maven { url 'https://maven.aliyun.com/repository/gradle-plugin/' }
    maven { url 'https://maven.aliyun.com/repository/spring-plugin/' }
    maven { url 'https://plugins.gradle.org/m2/' }
    maven { url 'https://maven.xillio.com/artifactory/libs-release/' }
}

dependencies {

    //////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /////////////////////////// Common dependencies
    //////////////////////////////////////////////////////////////////////////////////////////////////////////////

    // 로깅 어노테이션을 쓰기 위한 롬복
    // LOMBOK은 사용 전제조건이 까다로우므로 사용 시 주의.
    // 1. 어떤 롬복을 어떤 타겟에 implement(release/dev 모두) 최신판의 버전 숫자를 필히 명기해줘야 한다.
    // 2. 반드시 Annotation Processor를 활성해줘야 한다.
    //  1) 밑에처럼 annotationProcessor 형식의 dependency도 추가로 선언해 줘야 함
    //  2) Settings > Build, Execution, Depolyment > Compiler > Annotation Processors
    //     > Enable annotation processing 에 체크해야 함
    // https://mvnrepository.com/artifact/org.projectlombok/lombok
    implementation 'org.projectlombok:lombok:1.18.24'
    annotationProcessor 'org.projectlombok:lombok:1.18.24'

    // String 취급을 쉽게 해주는 Apache Commons Lang
    // https://mvnrepository.com/artifact/org.apache.commons/commons-lang3
    implementation 'org.apache.commons:commons-lang3:latest.integration'

    // 파싱 등을 처리하기 위해 영입한 Apache Commons Text
    // https://mvnrepository.com/artifact/org.apache.commons/commons-text
    implementation 'org.apache.commons:commons-text:1.10.0'

    // YAML 설정파일을 읽어오기 위해 import한 JACKSON-YAML 라이브러리
    // https://mvnrepository.com/artifact/com.fasterxml.jackson.dataformat/jackson-dataformat-yaml
    implementation 'com.fasterxml.jackson.dataformat:jackson-dataformat-yaml:latest.integration'
    // https://mvnrepository.com/artifact/com.fasterxml.jackson.core/jackson-databind
    implementation 'com.fasterxml.jackson.core:jackson-databind:latest.integration'

    // 자바 디스코드 봇 JDA 라이브러리
    // https://mvnrepository.com/artifact/net.dv8tion/JDA
    implementation ('net.dv8tion:JDA:latest.integration') {
        exclude module: 'opus-java' // 음성모듈 제외
    }

    // 스케쥴러 라이브러리
    // https://mvnrepository.com/artifact/org.quartz-scheduler/quartz
    implementation 'org.quartz-scheduler:quartz:latest.integration'

    // 로깅 라이브러리
    // api 'org.apache.utils.logging.log4j:log4j-core' <<< 안쓸려고..
    // 1. Bridge
    // https://mvnrepository.com/artifact/org.slf4j/jcl-over-slf4j
    implementation 'org.slf4j:jcl-over-slf4j:2.0.6'
    // 2. Slf4j API
    // https://mvnrepository.com/artifact/org.slf4j/slf4j-api
    implementation 'org.slf4j:slf4j-api:latest.integration'
    // 3. Binding
    // https://mvnrepository.com/artifact/ch.qos.logback/logback-classic
    implementation 'ch.qos.logback:logback-classic:latest.integration'
    // 4. Slf4j's implemented object (=logback)
    // https://mvnrepository.com/artifact/ch.qos.logback/logback-core
    implementation 'ch.qos.logback:logback-core:latest.integration'


    // ChatGPT를 쓰기 위한 의존성
    // https://mvnrepository.com/artifact/com.theokanning.openai-gpt3-java/client
    implementation 'com.theokanning.openai-gpt3-java:service:latest.integration'

    // 구글 번역 API를 쓰기 위한 구글 클라우드 의존성
    implementation platform('com.google.cloud:libraries-bom:latest.integration')
    implementation 'com.google.cloud:google-cloud-translate:latest.integration'

    // 엑셀 읽기 라이브러리 POI (테스트용)
    // https://mvnrepository.com/artifact/org.apache.poi/poi
    implementation 'org.apache.poi:poi:latest.integration'
    // https://mvnrepository.com/artifact/org.apache.poi/poi-ooxml
    implementation 'org.apache.poi:poi-ooxml:latest.integration'

    // Logback에 Groovy를 쓰기 위한 Groovy
    // https://mvnrepository.com/artifact/org.apache.groovy/groovy-all
    // implementation 'org.apache.groovy:groovy-all:latest.integration'

    //////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /////////////////////////// For only testing below
    //////////////////////////////////////////////////////////////////////////////////////////////////////////////

    // JDEPS로 의존성 풀 리스트 보기
    // 얘도 버전 명기를 해야 돌아간다.
    // https://mvnrepository.com/artifact/org.kordamp.gradle/jdeps-gradle-plugin
    // implementation 'org.kordamp.gradle:jdeps-gradle-plugin:0.19.

    // 테스트를 위한 JUnit
    // https://mvnrepository.com/artifact/org.junit.platform/junit-platform-launcher
    testImplementation 'org.junit.platform:junit-platform-launcher:latest.integration'
    // https://mvnrepository.com/artifact/org.junit.jupiter/junit-jupiter-api
    testImplementation 'org.junit.jupiter:junit-jupiter-api:latest.integration'
    // https://mvnrepository.com/artifact/org.junit.vintage/junit-vintage-engine
    testImplementation 'org.junit.vintage:junit-vintage-engine:latest.integration'

}

//apply plugin: 'org.kordamp.gradle.jdeps'

// CLI 터미널에서 한글 깨짐 오류가 발생하는 것을 방지한다.
tasks.withType(JavaCompile){
    options.encoding = "UTF-8"
}
